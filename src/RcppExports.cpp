// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// complement
char complement(char n);
RcppExport SEXP _footprintR_complement(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< char >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(complement(n));
    return rcpp_result_gen;
END_RCPP
}
// get_unmodified_base
char get_unmodified_base(char b);
RcppExport SEXP _footprintR_get_unmodified_base(SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< char >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(get_unmodified_base(b));
    return rcpp_result_gen;
END_RCPP
}
// read_modbam_cpp
Rcpp::List read_modbam_cpp(std::string inname_str, std::vector<std::string> regions, char modbase, bool verbose);
RcppExport SEXP _footprintR_read_modbam_cpp(SEXP inname_strSEXP, SEXP regionsSEXP, SEXP modbaseSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inname_str(inname_strSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type regions(regionsSEXP);
    Rcpp::traits::input_parameter< char >::type modbase(modbaseSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(read_modbam_cpp(inname_str, regions, modbase, verbose));
    return rcpp_result_gen;
END_RCPP
}
// sampleEntropy
double sampleEntropy(NumericVector data, int m, double r);
RcppExport SEXP _footprintR_sampleEntropy(SEXP dataSEXP, SEXP mSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleEntropy(data, m, r));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_footprintR_complement", (DL_FUNC) &_footprintR_complement, 1},
    {"_footprintR_get_unmodified_base", (DL_FUNC) &_footprintR_get_unmodified_base, 1},
    {"_footprintR_read_modbam_cpp", (DL_FUNC) &_footprintR_read_modbam_cpp, 4},
    {"_footprintR_sampleEntropy", (DL_FUNC) &_footprintR_sampleEntropy, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_footprintR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
