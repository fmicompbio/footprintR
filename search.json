[{"path":"https://fmicompbio.github.io/footprintR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Friedrich Miescher Institute Biomedical Research Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://fmicompbio.github.io/footprintR/articles/read-level-data.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Exploring read-level footprinting data with `footprintR`","text":"start analysis loading footprinting data level individual reads (example working summary-level data, see vignette(\"using-footprintR\")). Read-level data can extracted modBam files (standard bam file modification data stored MM ML tags, see SAMtags.pdf) using readModBam(). preferred way described . Alternatively, read-level modification data can also extracted modBam files using modkit (see modkitExtract() calling modkit R readModkitExtract() read resulting output file). require local installation modkit may interest specific modkit features used available otherwise. footprintR package contains small example modBam files generated using Dorado aligner: Modification data read files using readModBam(): create RangedSummarizedExperiment object positions rows: Just like summary-level data, columns correspond samples sample names obtained input files (extractfiles), files named automatically assigned (file corresponding separate sample). However, sample typically contains several reads (see se$n_reads), qscore column stores quality scores individual reads, simple vector, list vectors, scores grouped sample. may needed unlist() flat vector needed:","code":"# load packages library(footprintR) library(SummarizedExperiment)  # read-level 6mA data generated by 'dorado' modbamfiles <- system.file(\"extdata\",                            c(\"6mA_1_10reads.bam\", \"6mA_2_10reads.bam\"),                             package = \"footprintR\") names(modbamfiles) <- c(\"sample1\", \"sample2\") se <- readModBam(bamfiles = modbamfiles,                  regions = \"chr1:6940000-7000000\",                  modbase = \"a\",                  verbose = TRUE) #> extracting base modifications from modBAM files #>     opening input file /Users/runner/work/_temp/Library/footprintR/extdata/6mA_1_10reads.bam #>     reading alignments overlapping any of 1 regions #>     removed 1728 unaligned (e.g. soft-masked) of 20554 called bases #>     read 3 alignments #>     opening input file /Users/runner/work/_temp/Library/footprintR/extdata/6mA_2_10reads.bam #>     reading alignments overlapping any of 1 regions #>     removed 320 unaligned (e.g. soft-masked) of 10174 called bases #>     read 2 alignments #> finding unique genomic positions...collapsed 14789 positions to 9266 unique ones se #> class: RangedSummarizedExperiment  #> dim: 9266 2  #> metadata(0): #> assays(1): mod_prob #> rownames(9266): chr1:6930410:+ chr1:6930415:+ ... chr1:6941622:- #>   chr1:6941631:- #> rowData names(0): #> colnames(2): sample1 sample2 #> colData names(4): sample modbase n_reads qscore # rows are positions... rowRanges(se) #> UnstitchedGPos object with 9266 positions and 0 metadata columns: #>                  seqnames       pos strand #>                     <Rle> <integer>  <Rle> #>   chr1:6930410:+     chr1   6930410      + #>   chr1:6930415:+     chr1   6930415      + #>   chr1:6930419:+     chr1   6930419      + #>   chr1:6930421:+     chr1   6930421      + #>   chr1:6930428:+     chr1   6930428      + #>              ...      ...       ...    ... #>   chr1:6941611:-     chr1   6941611      - #>   chr1:6941614:-     chr1   6941614      - #>   chr1:6941620:-     chr1   6941620      - #>   chr1:6941622:-     chr1   6941622      - #>   chr1:6941631:-     chr1   6941631      - #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths # ... and columns are samples colData(se) #> DataFrame with 2 rows and 4 columns #>              sample     modbase   n_reads                  qscore #>         <character> <character> <integer>                  <List> #> sample1     sample1           a         3 14.1428,16.0127,20.3082 #> sample2     sample2           a         2        9.67461,13.66480 se$qscore #> List of length 2 #> names(2): sample1 sample2 unlist(se$qscore) #>  sample1  sample1  sample1  sample2  sample2  #> 14.14280 16.01270 20.30820  9.67461 13.66480"},{"path":"https://fmicompbio.github.io/footprintR/articles/read-level-data.html","id":"explore-assay-data","dir":"Articles","previous_headings":"","what":"Explore assay data","title":"Exploring read-level footprinting data with `footprintR`","text":"single assay mod_prob DataFrame modification probabilities. , store read-level data variable numbers reads sample, column (sample) just simple vector, position--read SparseMatrix. simple matrix needed, columns correspond reads instead sample, can created using .matrix(): One advantage grouping reads per sample can easily perform per-sample operations using lapply (returns list) endoapply (returns DataFrame): SparseMatrix objects store zeros thus use much less memory compared normal (dense) matrix. However, careful interpreting values matrix, follow specific convention: Important:  zeros correspond unobserved read/position combinations, values ‘implicitly’ called (modifictation probability less 5%) represented value 0.02. means manually calculating example average modification probability given position, taking row mean correct, include zero values correspond unobserved data: however rarely needed, convenience functions exclude unobserved (zero) values automatically . example, can summarize reads sample using addReadsSummary() (see next section).","code":"assayNames(se) #> [1] \"mod_prob\"  m <- assay(se, \"mod_prob\") m #> DataFrame with 9266 rows and 2 columns #>                        sample1        sample2 #>                 <SparseMatrix> <SparseMatrix> #> chr1:6930410:+           0:0:0         0:0.02 #> chr1:6930415:+           0:0:0         0:0.02 #> chr1:6930419:+           0:0:0         0:0.02 #> chr1:6930421:+           0:0:0         0:0.02 #> chr1:6930428:+           0:0:0         0:0.02 #> ...                        ...            ... #> chr1:6941611:- 0:0:0.052734375            0:0 #> chr1:6941614:- 0:0:0.130859375            0:0 #> chr1:6941620:- 0:0:0.068359375            0:0 #> chr1:6941622:- 0:0:0.060546875            0:0 #> chr1:6941631:- 0:0:0.056640625            0:0 m$sample1 #> <9266 x 3 SparseMatrix> of type \"double\" [nzcount=8350 (30%)]: #>         sample1-233e48a7-f379-4dcf-9270-958231125563 #>    [1,]                                            0 #>    [2,]                                            0 #>    [3,]                                            0 #>    [4,]                                            0 #>    [5,]                                            0 #>     ...                                            . #> [9262,]                                   0.00000000 #> [9263,]                                   0.00000000 #> [9264,]                                   0.00000000 #> [9265,]                                   0.00000000 #> [9266,]                                   0.00000000 #>         sample1-d52a5f6a-a60a-4f85-913e-eada84bfbfb9 #>    [1,]                                            0 #>    [2,]                                            0 #>    [3,]                                            0 #>    [4,]                                            0 #>    [5,]                                            0 #>     ...                                            . #> [9262,]                                   0.00000000 #> [9263,]                                   0.00000000 #> [9264,]                                   0.00000000 #> [9265,]                                   0.00000000 #> [9266,]                                   0.00000000 #>         sample1-92e906ae-cddb-4347-a114-bf9137761a8d #>    [1,]                                            0 #>    [2,]                                            0 #>    [3,]                                            0 #>    [4,]                                            0 #>    [5,]                                            0 #>     ...                                            . #> [9262,]                                   0.05273438 #> [9263,]                                   0.13085938 #> [9264,]                                   0.06835938 #> [9265,]                                   0.06054688 #> [9266,]                                   0.05664062  as.matrix(m) #> <9266 x 5 SparseMatrix> of type \"double\" [nzcount=14789 (32%)]: #>                sample1-233e48a7-f379-4dcf-9270-958231125563 ... #> chr1:6930410:+                                            0   . #> chr1:6930415:+                                            0   . #> chr1:6930419:+                                            0   . #> chr1:6930421:+                                            0   . #> chr1:6930428:+                                            0   . #>            ...                                            .   . #> chr1:6941611:-                                            0   . #> chr1:6941614:-                                            0   . #> chr1:6941620:-                                            0   . #> chr1:6941622:-                                            0   . #> chr1:6941631:-                                            0   . #>                sample2-d03efe3b-a45b-430b-9cb6-7e5882e4faf8 #> chr1:6930410:+                                         0.02 #> chr1:6930415:+                                         0.02 #> chr1:6930419:+                                         0.02 #> chr1:6930421:+                                         0.02 #> chr1:6930428:+                                         0.02 #>            ...                                            . #> chr1:6941611:-                                            0 #> chr1:6941614:-                                            0 #> chr1:6941620:-                                            0 #> chr1:6941622:-                                            0 #> chr1:6941631:-                                            0 lapply(m, ncol) #> $sample1 #> [1] 3 #>  #> $sample2 #> [1] 2 endoapply(m, ncol) #> DataFrame with 1 row and 2 columns #>     sample1   sample2 #>   <integer> <integer> #> 1         3         2 # modification probabilities at position chr1:6928850:- m[\"chr1:6928850:-\", ] #> DataFrame with 1 row and 2 columns #>                                  sample1        sample2 #>                           <SparseMatrix> <SparseMatrix> #> chr1:6928850:- 0.623046875:0.099609375:0            0:0  # WRONG: take the mean of all values lapply(m[\"chr1:6928850:-\", ], rowMeans) #> $sample1 #> [1] 0.2408854 #>  #> $sample2 #> [1] 0  # CORRECT: exclude the zeros lapply(m[\"chr1:6928850:-\", ], function(x) {     non_zero <- SparseArray::nzwhich(x != 0)     mean(x[non_zero]) }) #> $sample1 #> [1] 0.3613281 #>  #> $sample2 #> [1] NaN"},{"path":"https://fmicompbio.github.io/footprintR/articles/read-level-data.html","id":"summarize-read-level-data","dir":"Articles","previous_headings":"","what":"Summarize read-level data","title":"Exploring read-level footprinting data with `footprintR`","text":"Summarized data can obtained read-level data calculating per-position summary reads sample: discussed , automatically exclude non-observed (zero) values data calculating modification probability position (Pmod assay): summary statistics calculate selected using statistics argument. default, addReadsSummary() count number modified (Nmod) total (Nvalid) reads position sample, calculate fraction modified bases two (FracMod). example, addition also calculate average modification probability (Pmod) average confidence modification calls per position (AvgConf). set keep.reads = TRUE, get addition also read-level assay input object (mod_prob) reads grouped sample:","code":"se_summary <- addReadsSummary(se, keep.reads = TRUE,                               statistics = c(\"Nmod\", \"Nvalid\", \"FracMod\",                                              \"Pmod\", \"AvgConf\")) assay(se_summary, \"Pmod\")[\"chr1:6928850:-\", ] #>   sample1   sample2  #> 0.3613281       NaN assay(se_summary, \"Nmod\")[\"chr1:6928850:-\", ] #> sample1 sample2  #>       1       0 assay(se_summary, \"Nvalid\")[\"chr1:6928850:-\", ] #> sample1 sample2  #>       2       0 assay(se_summary, \"FracMod\")[\"chr1:6928850:-\", ] #> sample1 sample2  #>     0.5     NaN # read-level data is retained in \"mod_prob\" assay assayNames(se_summary) #> [1] \"Nmod\"     \"Nvalid\"   \"FracMod\"  \"Pmod\"     \"AvgConf\"  \"mod_prob\"  # ... which groups the reads by sample assay(se_summary, \"mod_prob\") #> DataFrame with 9266 rows and 2 columns #>                        sample1        sample2 #>                 <SparseMatrix> <SparseMatrix> #> chr1:6930410:+           0:0:0         0:0.02 #> chr1:6930415:+           0:0:0         0:0.02 #> chr1:6930419:+           0:0:0         0:0.02 #> chr1:6930421:+           0:0:0         0:0.02 #> chr1:6930428:+           0:0:0         0:0.02 #> ...                        ...            ... #> chr1:6941611:- 0:0:0.052734375            0:0 #> chr1:6941614:- 0:0:0.130859375            0:0 #> chr1:6941620:- 0:0:0.068359375            0:0 #> chr1:6941622:- 0:0:0.060546875            0:0 #> chr1:6941631:- 0:0:0.056640625            0:0  # the dimensions of  read-level `se` and summarized `se_summary` are identical dim(se) #> [1] 9266    2 dim(se_summary) #> [1] 9266    2"},{"path":"https://fmicompbio.github.io/footprintR/articles/read-level-data.html","id":"plot-data","dir":"Articles","previous_headings":"","what":"Plot data","title":"Exploring read-level footprinting data with `footprintR`","text":"read-level data can visualized just like summary-level data using plotRegion, using tracks.reads argument instead tracks.summary select type plot(s). reference, plot summary-level data:  … plot read-level data region:   x-axis plots “base-space”, meaning shows coordinates genomic bases modifications can irregularly spaced. Alternatively, can also generate plot “modbase-space”, modified bases shown gaps removed:   mentioned , read-level data still contained summary object se_summary, can plot summary-level read-level data simultaneously object input:","code":"plotRegion(se_summary, region = \"chr1:6932700-6932800\",            tracks.summary = list(FracMod = \"Point\")) plotRegion(se, region = \"chr1:6932700-6932800\",            tracks.summary = NULL,            tracks.reads = list(mod_prob = \"Heatmap\")) plotRegion(se, region = \"chr1:6932700-6932800\",            tracks.summary = NULL,            tracks.reads = list(mod_prob = \"Lollipop\")) plotRegion(se, region = \"chr1:6932700-6932800\",            tracks.summary = NULL,            tracks.reads = list(mod_prob = \"Heatmap\"),            modbaseSpace = TRUE) plotRegion(se, region = \"chr1:6932700-6932800\",            tracks.summary = NULL,            tracks.reads = list(mod_prob = \"Lollipop\"),            modbaseSpace = TRUE) plotRegion(se_summary, region = \"chr1:6932700-6932800\",            tracks.summary = list(FracMod = c(\"Smooth\")),            tracks.reads = list(mod_prob = c(\"Heatmap\", \"Lollipop\")))"},{"path":"https://fmicompbio.github.io/footprintR/articles/read-level-data.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Exploring read-level footprinting data with `footprintR`","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: aarch64-apple-darwin20 #> Running under: macOS Sonoma 14.6.1 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: UTC #> tzcode source: internal #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] SummarizedExperiment_1.35.1 Biobase_2.65.0              #>  [3] GenomicRanges_1.57.1        GenomeInfoDb_1.41.1         #>  [5] IRanges_2.39.2              S4Vectors_0.43.2            #>  [7] BiocGenerics_0.51.0         MatrixGenerics_1.17.0       #>  [9] matrixStats_1.3.0           footprintR_0.1.1            #>  #> loaded via a namespace (and not attached): #>  [1] tidyselect_1.2.1            viridisLite_0.4.2           #>  [3] dplyr_1.1.4                 farver_2.1.2                #>  [5] Biostrings_2.73.1           bitops_1.0-8                #>  [7] fastmap_1.2.0               SingleCellExperiment_1.27.2 #>  [9] RCurl_1.98-1.16             GenomicAlignments_1.41.0    #> [11] XML_3.99-0.17               digest_0.6.37               #> [13] lifecycle_1.0.4             magrittr_2.0.3              #> [15] compiler_4.4.1              rlang_1.1.4                 #> [17] sass_0.4.9                  tools_4.4.1                 #> [19] utf8_1.2.4                  yaml_2.3.10                 #> [21] data.table_1.15.4           rtracklayer_1.65.0          #> [23] knitr_1.48                  S4Arrays_1.5.7              #> [25] labeling_0.4.3              curl_5.2.2                  #> [27] DelayedArray_0.31.11        abind_1.4-5                 #> [29] BiocParallel_1.39.0         withr_3.0.1                 #> [31] purrr_1.0.2                 desc_1.4.3                  #> [33] grid_4.4.1                  fansi_1.0.6                 #> [35] beachmat_2.21.5             colorspace_2.1-1            #> [37] ggplot2_3.5.1               scales_1.3.0                #> [39] cli_3.6.3                   rmarkdown_2.28              #> [41] crayon_1.5.3                ragg_1.3.2                  #> [43] generics_0.1.3              httr_1.4.7                  #> [45] rjson_0.2.22                scuttle_1.15.4              #> [47] cachem_1.1.0                zlibbioc_1.51.1             #> [49] parallel_4.4.1              XVector_0.45.0              #> [51] restfulr_0.0.15             vctrs_0.6.5                 #> [53] Matrix_1.7-0                jsonlite_1.8.8              #> [55] patchwork_1.2.0             systemfonts_1.1.0           #> [57] jquerylib_0.1.4             tidyr_1.3.1                 #> [59] glue_1.7.0                  pkgdown_2.1.0.9000          #> [61] codetools_0.2-20            gtable_0.3.5                #> [63] BiocIO_1.15.2               UCSC.utils_1.1.0            #> [65] munsell_0.5.1               tibble_3.2.1                #> [67] pillar_1.9.0                htmltools_0.5.8.1           #> [69] GenomeInfoDbData_1.2.12     BSgenome_1.73.0             #> [71] R6_2.5.1                    textshaping_0.4.0           #> [73] evaluate_0.24.0             lattice_0.22-6              #> [75] highr_0.11                  Rsamtools_2.21.1            #> [77] bslib_0.8.0                 Rcpp_1.0.13                 #> [79] SparseArray_1.5.31          xfun_0.47                   #> [81] fs_1.6.4                    pkgconfig_2.0.3"},{"path":"https://fmicompbio.github.io/footprintR/articles/using-footprintR.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Using `footprintR`","text":"footprintR provides tools working single-molecule footprinting data R. include functions reading collapsed read-level data files generated Dorado modkit representation data R objects, functions manipulate objects visualization. Current contributors include: Panagiotis Papasaikas Sebastien Smallwood Charlotte Soneson Michael Stadler","code":""},{"path":"https://fmicompbio.github.io/footprintR/articles/using-footprintR.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Using `footprintR`","text":"footprintR can installed GitHub via BiocManager package:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"fmicompbio/footprintR\")"},{"path":"https://fmicompbio.github.io/footprintR/articles/using-footprintR.html","id":"functionality","dir":"Articles","previous_headings":"","what":"Functionality","title":"Using `footprintR`","text":"minimal example using footprintR illustrates functionality using summary-level data. start loading package:","code":"library(footprintR) library(SummarizedExperiment)"},{"path":"https://fmicompbio.github.io/footprintR/articles/using-footprintR.html","id":"read-summary-data-from-bed-files","dir":"Articles","previous_headings":"Functionality","what":"Read summary data from bed files","title":"Using `footprintR`","text":", demonstrate read visualize summary-level data (individual reads combined per genomic position). example work read-level data, see vignette(\"read-level-data\"). example using small example data provided part package. get file names per-position summary modification data bedMethyl format: allows us read data using readBedMethyl(): bedMethyl files contain summarized data read RangedSummarizedExperiment object. rows correspond genomic positions: … columns correspond different samples (corresponding names two input files bedmethylfiles): data stored two matrices (assays) called Nmod (number modified bases per sample position) Nvalid (number valid total read covering position sample): , can easily calculate fraction modifications: Please note non-finite fractions result positions zero coverage given sample.","code":"# collapsed 5mC data for a small genomic window in bedMethyl format bedmethylfiles <- system.file(\"extdata\",                               c(\"modkit_pileup_1.bed.gz\",                                 \"modkit_pileup_2.bed.gz\"),                               package = \"footprintR\")  # file with sequence of the reference genome in fasta format reffile <- system.file(\"extdata\", \"reference.fa.gz\", package = \"footprintR\") names(bedmethylfiles) <- c(\"sample1\", \"sample2\") se <- readBedMethyl(bedmethylfiles,                     sequence.context = 3,                     sequence.reference = reffile) se #> class: RangedSummarizedExperiment  #> dim: 12020 2  #> metadata(0): #> assays(2): Nmod Nvalid #> rownames: NULL #> rowData names(1): sequence.context #> colnames(2): sample1 sample2 #> colData names(0): rowRanges(se) #> UnstitchedGPos object with 12020 positions and 1 metadata column: #>           seqnames       pos strand | sequence.context #>              <Rle> <integer>  <Rle> |   <DNAStringSet> #>       [1]     chr1   6937686      + |              GCA #>       [2]     chr1   6937688      + |              ACT #>       [3]     chr1   6937689      + |              CTT #>       [4]     chr1   6937691      + |              TAA #>       [5]     chr1   6937696      + |              GCA #>       ...      ...       ...    ... .              ... #>   [12016]     chr1   6957049      - |              TGG #>   [12017]     chr1   6957051      - |              CCT #>   [12018]     chr1   6957052      - |              TCC #>   [12019]     chr1   6957056      - |              CCT #>   [12020]     chr1   6957057      - |              CCC #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths colnames(se) #> [1] \"sample1\" \"sample2\" assayNames(se) #> [1] \"Nmod\"   \"Nvalid\"  head(assay(se, \"Nmod\")) #>      sample1 sample2 #> [1,]       1       5 #> [2,]       1       0 #> [3,]       0       0 #> [4,]       0       0 #> [5,]       3       3 #> [6,]       0       0 head(assay(se, \"Nvalid\")) #>      sample1 sample2 #> [1,]      16      15 #> [2,]      16      15 #> [3,]       0       1 #> [4,]       1       0 #> [5,]      16      14 #> [6,]       1       0 fraction_modified <- assay(se, \"Nmod\") / assay(se, \"Nvalid\") head(fraction_modified) #>      sample1   sample2 #> [1,]  0.0625 0.3333333 #> [2,]  0.0625 0.0000000 #> [3,]     NaN 0.0000000 #> [4,]  0.0000       NaN #> [5,]  0.1875 0.2142857 #> [6,]  0.0000       NaN"},{"path":"https://fmicompbio.github.io/footprintR/articles/using-footprintR.html","id":"plot-data","dir":"Articles","previous_headings":"Functionality","what":"Plot data","title":"Using `footprintR`","text":"Use plotRegion() function visualize data specific region, visualizing accessibility using GpC methylation (sequence context GCH), adding smooth line:  endogenous DNA methylation (sequence context HCG):  just plotting coverage (Nvalid) smooth line:","code":"plotRegion(se,            region = \"chr1:6939000-6946000\",            tracks.summary = list(FracMod = \"PointSmooth\"),            sequence.context = \"GCH\") plotRegion(se,            region = \"chr1:6939000-6946000\",            tracks.summary = list(FracMod = \"PointSmooth\"),            sequence.context = \"HCG\") plotRegion(se,            region = \"chr1:6939000-6946000\",            tracks.summary = list(Nvalid = \"Smooth\"))"},{"path":"https://fmicompbio.github.io/footprintR/articles/using-footprintR.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Using `footprintR`","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: aarch64-apple-darwin20 #> Running under: macOS Sonoma 14.6.1 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: UTC #> tzcode source: internal #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] SummarizedExperiment_1.35.1 Biobase_2.65.0              #>  [3] GenomicRanges_1.57.1        GenomeInfoDb_1.41.1         #>  [5] IRanges_2.39.2              S4Vectors_0.43.2            #>  [7] BiocGenerics_0.51.0         MatrixGenerics_1.17.0       #>  [9] matrixStats_1.3.0           footprintR_0.1.1            #>  #> loaded via a namespace (and not attached): #>  [1] tidyselect_1.2.1            farver_2.1.2                #>  [3] dplyr_1.1.4                 R.utils_2.12.3              #>  [5] Biostrings_2.73.1           bitops_1.0-8                #>  [7] fastmap_1.2.0               SingleCellExperiment_1.27.2 #>  [9] RCurl_1.98-1.16             GenomicAlignments_1.41.0    #> [11] XML_3.99-0.17               digest_0.6.37               #> [13] lifecycle_1.0.4             magrittr_2.0.3              #> [15] compiler_4.4.1              rlang_1.1.4                 #> [17] sass_0.4.9                  tools_4.4.1                 #> [19] utf8_1.2.4                  yaml_2.3.10                 #> [21] data.table_1.15.4           rtracklayer_1.65.0          #> [23] knitr_1.48                  labeling_0.4.3              #> [25] S4Arrays_1.5.7              curl_5.2.2                  #> [27] DelayedArray_0.31.11        abind_1.4-5                 #> [29] BiocParallel_1.39.0         withr_3.0.1                 #> [31] purrr_1.0.2                 desc_1.4.3                  #> [33] R.oo_1.26.0                 grid_4.4.1                  #> [35] fansi_1.0.6                 beachmat_2.21.5             #> [37] colorspace_2.1-1            ggplot2_3.5.1               #> [39] scales_1.3.0                cli_3.6.3                   #> [41] rmarkdown_2.28              crayon_1.5.3                #> [43] ragg_1.3.2                  generics_0.1.3              #> [45] httr_1.4.7                  rjson_0.2.22                #> [47] scuttle_1.15.4              cachem_1.1.0                #> [49] zlibbioc_1.51.1             parallel_4.4.1              #> [51] XVector_0.45.0              restfulr_0.0.15             #> [53] vctrs_0.6.5                 Matrix_1.7-0                #> [55] jsonlite_1.8.8              patchwork_1.2.0             #> [57] systemfonts_1.1.0           jquerylib_0.1.4             #> [59] tidyr_1.3.1                 glue_1.7.0                  #> [61] pkgdown_2.1.0.9000          codetools_0.2-20            #> [63] gtable_0.3.5                BiocIO_1.15.2               #> [65] UCSC.utils_1.1.0            munsell_0.5.1               #> [67] tibble_3.2.1                pillar_1.9.0                #> [69] htmltools_0.5.8.1           GenomeInfoDbData_1.2.12     #> [71] BSgenome_1.73.0             R6_2.5.1                    #> [73] textshaping_0.4.0           evaluate_0.24.0             #> [75] lattice_0.22-6              highr_0.11                  #> [77] R.methodsS3_1.8.2           Rsamtools_2.21.1            #> [79] bslib_0.8.0                 Rcpp_1.0.13                 #> [81] SparseArray_1.5.31          xfun_0.47                   #> [83] fs_1.6.4                    pkgconfig_2.0.3"},{"path":"https://fmicompbio.github.io/footprintR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Stadler. Author, maintainer. Charlotte Soneson. Author. Panagiotis Papasaikas. Author. Sebastien Smallwood. Author. Friedrich Miescher Institute Biomedical Research. Copyright holder.","code":""},{"path":"https://fmicompbio.github.io/footprintR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Stadler M, Soneson C, Papasaikas P, Smallwood S (2024). footprintR: Tools working single-molecule footprinting data. R package version 0.1.1, https://fmicompbio.github.io/footprintR, https://github.com/fmicompbio/footprintR.","code":"@Manual{,   title = {footprintR: Tools for working with single-molecule footprinting data},   author = {Michael Stadler and Charlotte Soneson and Panagiotis Papasaikas and Sebastien Smallwood},   year = {2024},   note = {R package version 0.1.1, https://fmicompbio.github.io/footprintR},   url = {https://github.com/fmicompbio/footprintR}, }"},{"path":[]},{"path":"https://fmicompbio.github.io/footprintR/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tools for working with single-molecule footprinting data","text":"footprintR provides tools working single-molecule footprinting data R. include functions reading collapsed read-level data files generated modkit representation data R objects, functions manipulate objects visualization.. Current contributors include: Panagiotis Papasaikas Sebastien Smallwood Charlotte Soneson Michael Stadler","code":""},{"path":"https://fmicompbio.github.io/footprintR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for working with single-molecule footprinting data","text":"footprintR can installed GitHub via BiocManager package:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\")  BiocManager::install(\"fmicompbio/footprintR\")"},{"path":"https://fmicompbio.github.io/footprintR/index.html","id":"functionality","dir":"","previous_headings":"","what":"Functionality","title":"Tools for working with single-molecule footprinting data","text":"minimal example using footprintR: return value se SummarizedExperiment positions rows samples columns, assays Nmod Nvalid counts modified total (valid) bases. results can conveniently visualized:","code":"library(footprintR)  infile <- system.file(\"extdata\", \"modkit_pileup_1.bed.gz\", package = \"footprintR\") se <- readBedMethyl(bmfile) se  assayNames(se) plotRegion(se)"},{"path":"https://fmicompbio.github.io/footprintR/reference/addReadStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a variety of read-level modified basecalling summary statistics to a SummarizedExperiment — addReadStats","title":"Add a variety of read-level modified basecalling summary statistics to a SummarizedExperiment — addReadStats","text":"function calculates various per-read summary statistics modification probabilities calls SummarizedExperiment object genomic positions rows reads columns adds colData. See details information statistics calculated.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/addReadStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a variety of read-level modified basecalling summary statistics to a SummarizedExperiment — addReadStats","text":"","code":"addReadStats(   se,   regions = NULL,   sequence.context = NULL,   stats = NULL,   min.Nobs.ppos = NULL,   min.Nobs.pread = 0,   LowConf = 0.7,   LagRange = c(12, 64),   verbose = FALSE )"},{"path":"https://fmicompbio.github.io/footprintR/reference/addReadStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a variety of read-level modified basecalling summary statistics to a SummarizedExperiment — addReadStats","text":"se RangedSummarizedExperiment object assay \"mod_prob\" typically returned readModkitExtract readModBam. regions GRanges object limiting positions included calculations ones overlapping corresponding genomic regions. Alternatively, regions can specified character vector (e.g. \"chr1:1200-1300\") can coerced GRanges object. sequence.context character vector sequence context(s) include calculations. positions match one provided sequence contexts included. Sequence contexts can provided using IUPAC redundancy codes. sequence contexts modified bases obtained rowData(se)$sequence.context thus requires se contains appropriate information, example setting sequence.context sequence.reference arguments readModkitExtract generated, adding using addSeqContext. stats Character vector specifying statistics calculate. set NULL available statistics calculated. See details complete list available read statistics. min.Nobs.ppos numeric scalar value >=1 indicating minimum coverage individual positions included calculations. high coverage data effective filter removing spurious modbases, typically result erroneous basecalling. default NULL sets value Q3-0.5*IQR, Q3 IQR third quartile interquartile range coverage distribution estimated data se. min.Nobs.pread numeric scalar minimum number observed modifiable bases per read included calculations. NA values returned reads pass threshold. LowConf numeric scalar minimum call confidence calls considered \"low confidence\". LagRange numeric vector two values (minimum maxium) defining range lags calculation autocorrelation partial autocorrelation (see details section). verbose TRUE, report progress.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/addReadStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a variety of read-level modified basecalling summary statistics to a SummarizedExperiment — addReadStats","text":"SummarizedExperiment object colData filtered positions according regions, sequence.context min.Nobs.ppos arguments extended include read statistics row- column-data.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/addReadStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a variety of read-level modified basecalling summary statistics to a SummarizedExperiment — addReadStats","text":"Calculates collection location/scatter statistics information theoretic/signal-processing metrics modification probability, confidence modification call value vectors across individual reads. sequence.context, min.coverage min.Nobs.ppos filters enforced, modifiable bases passing filters included calculations. following statistics available: MeanModProb : Mean modification probability across read. FracMod : Fraction confidently modified bases, defined ratio modifiable bases modification probability >= 0.5 modifiable bases. MeanConf :  Mean call confidence across read. MeanConfUnm : Mean call confidence confined unmodified bases (modifiable bases modification probability < 0.5). MeanConfMod : Mean call confidence confined modified bases (modifiable bases modification probability >= 0.5). FracLowConf : Fraction modifiable bases called low confidence (call confidence < LowConf). IQRModProb : Interquartile range modification probabilities across read. sdModProb : Standard deviation modification probabilities across read. SEntrModProb : Sample entropy modification probability signal. Sample entropy metric assessing complexity one-dimensional physiological signals. higher sample entropy, irregular, unpredictable therefore complex signal. See wikipedia:Sample_entropy details. Lag1DModProb : Mean Lag1 differences modification calls, defined : mean(Mod[]-Mod[-1]), Mod {0,1} modification call. ACModProb : Autocorrelation modification probability values lags range LagRange. range typically covers signal nucleosome periodicity. PACModProb : Partial autocorrelation modification probability values lags range LagRange. range typically covers signal nucleosome periodicity.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/addReadStats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add a variety of read-level modified basecalling summary statistics to a SummarizedExperiment — addReadStats","text":"Panagiotis Papapasaikas","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/addReadStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a variety of read-level modified basecalling summary statistics to a SummarizedExperiment — addReadStats","text":"","code":"library(SummarizedExperiment) #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, table, tapply, #>     union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following object is masked from ‘package:utils’: #>  #>     findMatches #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians modbamfile <- system.file(\"extdata\", \"6mA_1_10reads.bam\",                           package = \"footprintR\") se <- readModBam(bamfile = modbamfile, regions = \"chr1:6940000-6955000\",            modbase = \"a\", verbose = TRUE) #> extracting base modifications from modBAM files #>     opening input file /Users/runner/work/_temp/Library/footprintR/extdata/6mA_1_10reads.bam #>     reading alignments overlapping any of 1 regions #>     removed 1728 unaligned (e.g. soft-masked) of 20554 called bases #>     read 3 alignments #> finding unique genomic positions... #> collapsed 8350 positions to 6057 unique ones se_withReadStats <- addReadStats(se) rowData(se_withReadStats) #> DataFrame with 6057 rows and 0 columns colData(se_withReadStats) #> DataFrame with 1 row and 5 columns #>         sample     modbase   n_reads                  qscore #>    <character> <character> <integer>                  <List> #> s1          s1           a         3 14.1428,16.0127,20.3082 #>                                                                                                     QC #>                                                                                                 <List> #> s1 0.178342:0.1498969:0.930859:...,0.169769:0.1234286:0.910119:...,0.102100:0.0558784:0.932400:...,..."},{"path":"https://fmicompbio.github.io/footprintR/reference/addReadsSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize a read-level object to sample-level. — addReadsSummary","title":"Summarize a read-level object to sample-level. — addReadsSummary","text":"function take SummarizedExperiment object read-level footprinting data (e.g. returned readModkitExtract readModBam) summarize reads sample, instance generate modified total counts position sample.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/addReadsSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize a read-level object to sample-level. — addReadsSummary","text":"","code":"addReadsSummary(   se,   assay.type = \"mod_prob\",   statistics = c(\"Nmod\", \"Nvalid\", \"FracMod\"),   keep.reads = FALSE,   verbose = FALSE )"},{"path":"https://fmicompbio.github.io/footprintR/reference/addReadsSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize a read-level object to sample-level. — addReadsSummary","text":"se SummarizedExperiment object read-level footprinting data. Rows correspond positions columns samples. assay.type string integer scalar specifying assay se containing read-level data summarized. Typically, assay contains modification probabilities. statistics Character vector specifying type statistics computed. Currently supported values \"Nmod\" (number modification probabilities greater equal 0.5), \"Nvalid\" (number overlapping reads), \"Pmod\" (average modification probability), \"AvgConf\" (average confidence (non-)modification probabilities). keep.reads scalar logical. TRUE, read-level data assay.type retained assay name. verbose TRUE, report progress.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/addReadsSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize a read-level object to sample-level. — addReadsSummary","text":"SummarizedExperiment object dimensions se (positions rows samples columns), added assays corresponding requested statistics.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/footprintR/reference/addReadsSummary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize a read-level object to sample-level. — addReadsSummary","text":"Charlotte Soneson, Michael Stadler","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/addReadsSummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize a read-level object to sample-level. — addReadsSummary","text":"","code":"exfile <- system.file(\"extdata\", \"modkit_extract_rc_6mA_1.tsv.gz\", package = \"footprintR\") se <- readModkitExtract(exfile, modbase = \"a\") se #> class: RangedSummarizedExperiment  #> dim: 8344 1  #> metadata(2): modkit_threshold filter_threshold #> assays(1): mod_prob #> rownames(8344): chr1:6929104:+ chr1:6929106:+ ... chr1:6941530:- #>   chr1:6941531:- #> rowData names(0): #> colnames(1): s1 #> colData names(2): sample modbase  se_summary <- addReadsSummary(se, keep.reads = TRUE) se_summary #> class: RangedSummarizedExperiment  #> dim: 8344 1  #> metadata(0): #> assays(4): Nmod Nvalid FracMod mod_prob #> rownames(8344): chr1:6929104:+ chr1:6929106:+ ... chr1:6941530:- #>   chr1:6941531:- #> rowData names(0): #> colnames(1): s1 #> colData names(2): sample modbase"},{"path":"https://fmicompbio.github.io/footprintR/reference/addSeqContext.html","id":null,"dir":"Reference","previous_headings":"","what":"Add sequence context around positions of interest to a SummarizedExperiment. — addSeqContext","title":"Add sequence context around positions of interest to a SummarizedExperiment. — addSeqContext","text":"Convenience function extract sequence context around positions interest (rowRanges RangedSummarizedExperiment) add SummarizedExperiment's row data (rowData(se)$sequence.context). extracted sequences correspond regions defined resize(rowRanges(x), width = sequence.context.width, fix = \"center\". Sequence contexts extracted using extractSeqContext.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/addSeqContext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add sequence context around positions of interest to a SummarizedExperiment. — addSeqContext","text":"","code":"addSeqContext(x, sequence.context.width, sequence.reference)"},{"path":"https://fmicompbio.github.io/footprintR/reference/addSeqContext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add sequence context around positions of interest to a SummarizedExperiment. — addSeqContext","text":"x RangedSummarizedExperiment. sequence.context.width numeric scalar giving width sequence context extracted reference (sequence.reference argument). must odd number sequence can centered modified base. sequence.context.width = 0 (default), sequence context extracted. sequence.reference BSgenome object, character scalar giving path fasta formatted file reference sequences, DNAStringSet object. sequence context (see sequence.context.width argument) extracted sequences.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/addSeqContext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add sequence context around positions of interest to a SummarizedExperiment. — addSeqContext","text":"RangedSummarizedExperiment object sequence contexts added DNAStringSet object rowData(x)$sequence.context.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/footprintR/reference/addSeqContext.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add sequence context around positions of interest to a SummarizedExperiment. — addSeqContext","text":"Michael Stadler","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/addSeqContext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add sequence context around positions of interest to a SummarizedExperiment. — addSeqContext","text":"","code":"# load package library(SummarizedExperiment)  # file with sequence in fasta format of length 6957060 reffile <- system.file(\"extdata\", \"reference.fa.gz\", package = \"footprintR\")  # define some regions at the end of the reference sequence se <- SummarizedExperiment(           assays = matrix(1:3, ncol=1),           rowRanges = GRanges(               \"chr1\", IRanges(start = 6957060 - c(4, 2, 0),               width = 1, names = c(\"a\",\"b\",\"c\")),               strand = \"-\"))  # add sequence context (note the padding with N's) rowRanges(se) #> GRanges object with 3 ranges and 0 metadata columns: #>     seqnames    ranges strand #>        <Rle> <IRanges>  <Rle> #>   a     chr1   6957056      - #>   b     chr1   6957058      - #>   c     chr1   6957060      - #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths se <- addSeqContext(se, 7, reffile) rowRanges(se) #> GRanges object with 3 ranges and 1 metadata column: #>     seqnames    ranges strand | sequence.context #>        <Rle> <IRanges>  <Rle> |   <DNAStringSet> #>   a     chr1   6957056      - |          CCCCTTT #>   b     chr1   6957058      - |          TCCCCTN #>   c     chr1   6957060      - |          TCCCNNN #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths"},{"path":"https://fmicompbio.github.io/footprintR/reference/calcAndCountDist.html","id":null,"dir":"Reference","previous_headings":"","what":"Count frequency of differences between values in integer vectors. — calcAndCountDist","title":"Count frequency of differences between values in integer vectors. — calcAndCountDist","text":"Given two ascendingly sorted integer vectors query reference, calculate count differences elements greater zero less maxd. number observed distances d reported cnt[d], maxd corresponds length(cnt). function called calcModbaseSpacing, provides higher level, convenient interface.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/calcAndCountDist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count frequency of differences between values in integer vectors. — calcAndCountDist","text":"","code":"calcAndCountDist(query, reference, cnt)"},{"path":"https://fmicompbio.github.io/footprintR/reference/calcAndCountDist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count frequency of differences between values in integer vectors. — calcAndCountDist","text":"query first integer vector. reference second integer vector. Distances calculated element query greater element reference. cnt NumericVector store result . length cnt defines maximal distance included analysis, new counts added values cnt (repeated calls calcAndCountDist increment existing counts).","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/calcAndCountDist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count frequency of differences between values in integer vectors. — calcAndCountDist","text":"numeric vector cnt, cnt[d] correspond number observed distances d.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/calcAndCountDist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Count frequency of differences between values in integer vectors. — calcAndCountDist","text":"Michael Stadler","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/calcModbaseSpacing.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distances between modified bases on individual reads. — calcModbaseSpacing","title":"Calculate distances between modified bases on individual reads. — calcModbaseSpacing","text":"Calculate frequencies read modified base distances, example read-level modification data estimate nucleosome repeat length. Distance calculations implemented C++ (calcAndCountDist) efficiency.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/calcModbaseSpacing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distances between modified bases on individual reads. — calcModbaseSpacing","text":"","code":"calcModbaseSpacing(   se,   assay.type = \"mod_prob\",   min_mod_prob = 0.5,   rmdup = TRUE,   dmax = 1000L )"},{"path":"https://fmicompbio.github.io/footprintR/reference/calcModbaseSpacing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distances between modified bases on individual reads. — calcModbaseSpacing","text":"se SummarizedExperiment object read-level footprinting data, example returned readModBam. Rows correspond positions columns samples. assay.type string integer scalar specifying assay se containing read-level modification probabilities. min_mod_prob Numeric scalar giving minimal modification probability modified base. rmdup Logical scalar indicating duplicates removed. TRUE (default), one several alignments starting coordinate used. dmax Numeric scalar specifying maximal distance modified bases read count.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/calcModbaseSpacing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distances between modified bases on individual reads. — calcModbaseSpacing","text":"integer vector dmax elements, element position d giving observed number alignment pairs distance.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/calcModbaseSpacing.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate distances between modified bases on individual reads. — calcModbaseSpacing","text":"Phasograms originally described Valouev et al., Nature 2011 (doi:10.1038/nature10002). implementation differs three ways original algorithms: Instead strand alignment start positions, function adapted single-molecule footprinting data measures distances -read modified base positions. implement removing positions seen less n times (referred n-pile subset paper). allow retain alignments fall selected genomic intervals (regions argument).","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/footprintR/reference/calcModbaseSpacing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate distances between modified bases on individual reads. — calcModbaseSpacing","text":"Michael Stadler","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/calcModbaseSpacing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate distances between modified bases on individual reads. — calcModbaseSpacing","text":"","code":"modbamfiles <- system.file(\"extdata\",                            c(\"6mA_1_10reads.bam\", \"6mA_2_10reads.bam\"),                            package = \"footprintR\") se <- readModBam(modbamfiles, \"chr1:6940000-6955000\", \"a\")  moddist <- calcModbaseSpacing(se) print(estimateNRL(moddist)[1:2]) #> $nrl #> [1] 183.9 #>  #> $nrl.CI95 #>    2.5 %   97.5 %  #> 179.8787 187.9213  #>  plotModbaseSpacing(moddist)  plotModbaseSpacing(moddist, detailedPlots = TRUE)"},{"path":"https://fmicompbio.github.io/footprintR/reference/calcReadStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a variety of read-level modified basecalling summary statistics — calcReadStats","title":"Calculate a variety of read-level modified basecalling summary statistics — calcReadStats","text":"function calculates various per-read summary statistics modification probabilities calls SummarizedExperiment object genomic positions rows reads columns. See details information statistics calculated.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/calcReadStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a variety of read-level modified basecalling summary statistics — calcReadStats","text":"","code":"calcReadStats(   se,   regions = NULL,   sequence.context = NULL,   stats = NULL,   min.Nobs.ppos = NULL,   min.Nobs.pread = 0,   LowConf = 0.7,   LagRange = c(12, 64),   verbose = FALSE )"},{"path":"https://fmicompbio.github.io/footprintR/reference/calcReadStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a variety of read-level modified basecalling summary statistics — calcReadStats","text":"se RangedSummarizedExperiment object assay \"mod_prob\" typically returned readModkitExtract readModBam. regions GRanges object limiting positions included calculations ones overlapping corresponding genomic regions. Alternatively, regions can specified character vector (e.g. \"chr1:1200-1300\") can coerced GRanges object. sequence.context character vector sequence context(s) include calculations. positions match one provided sequence contexts included. Sequence contexts can provided using IUPAC redundancy codes. sequence contexts modified bases obtained rowData(se)$sequence.context thus requires se contains appropriate information, example setting sequence.context sequence.reference arguments readModkitExtract generated, adding using addSeqContext. stats Character vector specifying statistics calculate. set NULL available statistics calculated. See details complete list available read statistics. min.Nobs.ppos numeric scalar value >=1 indicating minimum coverage individual positions included calculations. high coverage data effective filter removing spurious modbases, typically result erroneous basecalling. default NULL sets value Q3-0.5*IQR, Q3 IQR third quartile interquartile range coverage distribution estimated data se. min.Nobs.pread numeric scalar minimum number observed modifiable bases per read included calculations. NA values returned reads pass threshold. LowConf numeric scalar minimum call confidence calls considered \"low confidence\". LagRange numeric vector two values (minimum maxium) defining range lags calculation autocorrelation partial autocorrelation (see details section). verbose TRUE, report progress.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/calcReadStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a variety of read-level modified basecalling summary statistics — calcReadStats","text":"SimpleList object QC statistics samples se.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/calcReadStats.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a variety of read-level modified basecalling summary statistics — calcReadStats","text":"Calculates collection location/scatter statistics information theoretic/signal-processing metrics modification probability, confidence modification call value vectors across individual reads. sequence.context, min.coverage min.Nobs.ppos filters enforced, modifiable bases passing filters included calculations. following statistics available: MeanModProb : Mean modification probability across read. FracMod : Fraction confidently modified bases, defined ratio modifiable bases modification probability >= 0.5 modifiable bases. MeanConf :  Mean call confidence across read. MeanConfUnm : Mean call confidence confined unmodified bases (modifiable bases modification probability < 0.5). MeanConfMod : Mean call confidence confined modified bases (modifiable bases modification probability >= 0.5). FracLowConf : Fraction modifiable bases called low confidence (call confidence < LowConf). IQRModProb : Interquartile range modification probabilities across read. sdModProb : Standard deviation modification probabilities across read. SEntrModProb : Sample entropy modification probability signal. Sample entropy metric assessing complexity one-dimensional physiological signals. higher sample entropy, irregular, unpredictable therefore complex signal. See wikipedia:Sample_entropy details. Lag1DModProb : Mean Lag1 differences modification calls, defined : mean(Mod[]-Mod[-1]), Mod {0,1} modification call. ACModProb : Autocorrelation modification probability values lags range LagRange. range typically covers signal nucleosome periodicity. PACModProb : Partial autocorrelation modification probability values lags range LagRange. range typically covers signal nucleosome periodicity.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/calcReadStats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate a variety of read-level modified basecalling summary statistics — calcReadStats","text":"Panagiotis Papapasaikas, Charlotte Soneson","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/calcReadStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a variety of read-level modified basecalling summary statistics — calcReadStats","text":"","code":"library(SummarizedExperiment) modbamfile <- system.file(\"extdata\", \"6mA_1_10reads.bam\",                           package = \"footprintR\") se <- readModBam(bamfile = modbamfile, regions = \"chr1:6940000-6955000\",            modbase = \"a\", verbose = TRUE) #> extracting base modifications from modBAM files #>     opening input file /Users/runner/work/_temp/Library/footprintR/extdata/6mA_1_10reads.bam #>     reading alignments overlapping any of 1 regions #>     removed 1728 unaligned (e.g. soft-masked) of 20554 called bases #>     read 3 alignments #> finding unique genomic positions... #> collapsed 8350 positions to 6057 unique ones ReadStats <- calcReadStats(se) ReadStats[[\"s1\"]] #> DataFrame with 3 rows and 13 columns #>                                         MeanModProb   FracMod  MeanConf #>                                           <numeric> <numeric> <numeric> #> s1-233e48a7-f379-4dcf-9270-958231125563    0.178342 0.1498969  0.930859 #> s1-d52a5f6a-a60a-4f85-913e-eada84bfbfb9    0.169769 0.1234286  0.910119 #> s1-92e906ae-cddb-4347-a114-bf9137761a8d    0.102100 0.0558784  0.932400 #>                                         MeanConfUnm MeanConfMod FracLowConf #>                                           <numeric>   <numeric>   <numeric> #> s1-233e48a7-f379-4dcf-9270-958231125563    0.942603    0.864255   0.0680724 #> s1-d52a5f6a-a60a-4f85-913e-eada84bfbfb9    0.922299    0.823622   0.0897143 #> s1-92e906ae-cddb-4347-a114-bf9137761a8d    0.939721    0.808703   0.0572195 #>                                         IQRModProb sdModProb SEntrModProb #>                                          <numeric> <numeric>    <numeric> #> s1-233e48a7-f379-4dcf-9270-958231125563  0.1108594  0.306032     0.213926 #> s1-d52a5f6a-a60a-4f85-913e-eada84bfbfb9  0.1421094  0.270295     0.329435 #> s1-92e906ae-cddb-4347-a114-bf9137761a8d  0.0600781  0.195103     0.347000 #>                                         Lag1DModProb #>                                            <numeric> #> s1-233e48a7-f379-4dcf-9270-958231125563    0.1474094 #> s1-d52a5f6a-a60a-4f85-913e-eada84bfbfb9    0.1566609 #> s1-92e906ae-cddb-4347-a114-bf9137761a8d    0.0889982 #>                                                                       ACModProb #>                                                                          <list> #> s1-233e48a7-f379-4dcf-9270-958231125563       0.1278957,0.0813845,0.0568569,... #> s1-d52a5f6a-a60a-4f85-913e-eada84bfbfb9       0.0568332,0.0669937,0.0792946,... #> s1-92e906ae-cddb-4347-a114-bf9137761a8d  0.03030089, 0.01649001,-0.00553059,... #>                                                                      PACModProb #>                                                                          <list> #> s1-233e48a7-f379-4dcf-9270-958231125563    -0.0410769,-0.0214619,-0.0135970,... #> s1-d52a5f6a-a60a-4f85-913e-eada84bfbfb9       0.0242180,0.0287871,0.0366562,... #> s1-92e906ae-cddb-4347-a114-bf9137761a8d -0.00193405,-0.01611739, 0.01876362,... #>                                              sample #>                                         <character> #> s1-233e48a7-f379-4dcf-9270-958231125563          s1 #> s1-d52a5f6a-a60a-4f85-913e-eada84bfbfb9          s1 #> s1-92e906ae-cddb-4347-a114-bf9137761a8d          s1"},{"path":"https://fmicompbio.github.io/footprintR/reference/estimateNRL.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the nucleosome repeat length (NRL) from modified-base distances. — estimateNRL","title":"Estimate the nucleosome repeat length (NRL) from modified-base distances. — estimateNRL","text":"Estimate nucleosome repeat length (NRL) frequencies -read modified base distances, e.g. generated calcModbaseSpacing. NRL obtained slope linear fit modes distance distribution.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/estimateNRL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the nucleosome repeat length (NRL) from modified-base distances. — estimateNRL","text":"","code":"estimateNRL(   x,   mind = 140L,   usePeaks = 1:5,   span1 = 100/length(x),   span2 = 1500/length(x) )"},{"path":"https://fmicompbio.github.io/footprintR/reference/estimateNRL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the nucleosome repeat length (NRL) from modified-base distances. — estimateNRL","text":"x numeric vector giving counts distances (typically output calcModbaseSpacing. mind integer(1) specifying minimal distance used NRL estimation. default value (140) ignores distance short span least single nucleosome. usePeaks integer vector selecting modes (peaks) phasogram used NRL estimation. span1 numeric(1) giving smoothing parameter de-trending loess fit (high pass filter). span2 numeric(1) giving smoothing parameter de-noising loess fit (low pass filter).","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/estimateNRL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the nucleosome repeat length (NRL) from modified-base distances. — estimateNRL","text":"list elements: nrl estimated nucleosome repeat length nrl.CI95 95-percent confidence interval xs smoothed (de-trended) phasogram loessfit de-noising fit de-trended phasogram lmfit linear fit phasogram peaks mind minimal distance included fit span1 smoothing parameter de-trending loess fit span2 smoothing parameter de-noising loess fit usePeaks peaks used fit","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/footprintR/reference/estimateNRL.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate the nucleosome repeat length (NRL) from modified-base distances. — estimateNRL","text":"Michael Stadler","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/estimateNRL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the nucleosome repeat length (NRL) from modified-base distances. — estimateNRL","text":"","code":"# see the help for calcModbaseSpacing() for a full example"},{"path":"https://fmicompbio.github.io/footprintR/reference/extractSeqContext.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the sequence context around positions of interest. — extractSeqContext","title":"Extract the sequence context around positions of interest. — extractSeqContext","text":"function extract sequence context sequence.context.width bases around center regions defined x sequence.reference.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/extractSeqContext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the sequence context around positions of interest. — extractSeqContext","text":"","code":"extractSeqContext(x, sequence.context.width, sequence.reference)"},{"path":"https://fmicompbio.github.io/footprintR/reference/extractSeqContext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the sequence context around positions of interest. — extractSeqContext","text":"x GRanges object defining regions interest. Alternatively, RangedSummarizedExperiment object regions can extracted using rowRanges. extracted sequences correspond regions defined resize(x, width = sequence.context.width, fix = \"center\". sequence.context.width numeric scalar giving width sequence context extracted reference (sequence.reference argument). must odd number sequence can centered modified base. sequence.context.width = 0 (default), sequence context extracted. sequence.reference BSgenome object, character scalar giving path fasta formatted file reference sequences, DNAStringSet object. sequence context (see sequence.context.width argument) extracted sequences.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/extractSeqContext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the sequence context around positions of interest. — extractSeqContext","text":"DNAStringSet object length x extracted sequence context. elements guaranteed identical length (sequence context extends start beyond end  reference sequence, padded 'N' bases.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/footprintR/reference/extractSeqContext.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract the sequence context around positions of interest. — extractSeqContext","text":"Michael Stadler","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/extractSeqContext.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the sequence context around positions of interest. — extractSeqContext","text":"","code":"# file with sequence in fasta format of length 6957060 reffile <- system.file(\"extdata\", \"reference.fa.gz\", package = \"footprintR\")  # define some regions at the end of the reference sequence regions <- GenomicRanges::GRanges(     \"chr1\", IRanges::IRanges(start = 6957060 - c(4, 2, 0),     width = 1, names = c(\"a\",\"b\",\"c\")))  # extract sequence context (note the padding with N's) extractSeqContext(regions, 7, reffile) #> DNAStringSet object of length 3: #>     width seq                                               names                #> [1]     7 AAAGGGG                                           a #> [2]     7 AGGGGAN                                           b #> [3]     7 GGGANNN                                           c"},{"path":"https://fmicompbio.github.io/footprintR/reference/modkitExtract.html","id":null,"dir":"Reference","previous_headings":"","what":"Call modkit extract to extract read-level base modifications from modBAM files — modkitExtract","title":"Call modkit extract to extract read-level base modifications from modBAM files — modkitExtract","text":"function wrapper around modkit extract sub-command extract read-level base modification information modBAM files tab-separated values table(s). information available modkit extract arguments output tables specification see https://nanoporetech.github.io/modkit/intro_extract.html","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/modkitExtract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call modkit extract to extract read-level base modifications from modBAM files — modkitExtract","text":"","code":"modkitExtract(   modkit_bin = NULL,   bamfile,   regions = NULL,   num_reads = NULL,   out_extract_table = NULL,   out_read_calls = NULL,   out_log_file = NULL,   modkit_args = NULL,   tempdir_base = tempdir(),   verbose = TRUE )"},{"path":"https://fmicompbio.github.io/footprintR/reference/modkitExtract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call modkit extract to extract read-level base modifications from modBAM files — modkitExtract","text":"modkit_bin Character scalar specifying path modkit binary. NULL, modkit searched path using Sys.. bamfile Character scalar specifying path modBAM file. indexed BAM file can significantly speed certain extract operations. regions GRanges object specifying genomic regions extract reads . Note reads trimmed boundaries specified ranges. result, returned positions typically extend specified regions. num_reads Number reads extract per specified genomic region. N genomic ranges specified, total number extracted reads num_reads * N. out_extract_table Character scalar specifying path extract table output. Can NULL read-calls table needed. out_read_calls Character scalar specifying path read-calls table output. Can NULL extract table needed. out_log_file Character scalar specifying path command run log output. Can NULL log file needed (recommended). modkit_args Character vector additional modkit extract arguments. Please refer modkit extract documentation complete list possible arguments. tempdir_base Character scalar specifying path create modkit_temp directory. temporary directory created multiple genomic regions specified. verbose logical scalar. TRUE, report progress.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/modkitExtract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Call modkit extract to extract read-level base modifications from modBAM files — modkitExtract","text":"character vector elements \"extract-table\", \"read-calls\" \"run-log\", specifying paths generated table, call log files, respectively. NA value indicates given output generated.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/footprintR/reference/modkitExtract.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Call modkit extract to extract read-level base modifications from modBAM files — modkitExtract","text":"Panagiotis Papapasaikas","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/modkitExtract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Call modkit extract to extract read-level base modifications from modBAM files — modkitExtract","text":"","code":"if (FALSE) { # \\dontrun{ GR <- as(c(\"chr1:12340678-12345678\", \"chr2:12340678-12345678\"), \"GRanges\")  further_args <- c(    '-t 8', '--force',    '--mapped-only', '--edge-filter 100',    '-p  0.2',    '--mod-threshold m:0.8',    '--mod-threshold a:0.5' )  # Produce both `extract table` and `read calls` files for multiple GRanges modkitExtract(modkit = modkit_bin_PATH, bamfile = BAMF, num_reads = 10,               regions = GR[1:2], out_extract_table = \"test.etbl\",               out_read_calls = \"test.rdcl\", modkit_args = further_args) # Produce only `extract table` file modkitExtract(modkit = modkit_bin_PATH, bamfile = BAMF, num_reads = 10,               regions = GR[1], out_extract_table = \"test.etbl\",               out_read_calls = NULL, modkit_args = further_args) # Produce only `read calls` file modkitExtract(modkit = modkit_bin_PATH, bamfile = BAMF, num_reads = 10,               regions = GR[1], out_extract_table = NULL,               out_read_calls = \"test.rdcl\", modkit_args = further_args) } # }"},{"path":"https://fmicompbio.github.io/footprintR/reference/plotModbaseSpacing.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot annotated distances between modified bases. — plotModbaseSpacing","title":"Plot annotated distances between modified bases. — plotModbaseSpacing","text":"Plot distances bwtween modified bases annotate estimated nucleosome repeat length (NRL).","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/plotModbaseSpacing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot annotated distances between modified bases. — plotModbaseSpacing","text":"","code":"plotModbaseSpacing(   x,   hide = TRUE,   xlim = NULL,   base_size = 14,   detailedPlots = FALSE,   ... )"},{"path":"https://fmicompbio.github.io/footprintR/reference/plotModbaseSpacing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot annotated distances between modified bases. — plotModbaseSpacing","text":"x numeric vector giving counts distances modified bases read (typically output calcModbaseSpacing. hide TRUE (default), hide distance counts used NRL estimate (mind parameter estimateNRL). xlim numeric(2) x-axis (distance) limits first two plots (see Details). NULL (default), full range defined x hide used. base_size Numeric scalar defining base font size pts. detailedPlots TRUE, create three plots instead just single plot (see Details). ... Additional arguments passed estimateNRL control NRL estimation.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/plotModbaseSpacing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot annotated distances between modified bases. — plotModbaseSpacing","text":"ggplot object.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/plotModbaseSpacing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot annotated distances between modified bases. — plotModbaseSpacing","text":"function visualize annotated distance frequencies modified bases. detailedPlots=FALSE (default), create single annotated plot. detailedPlots=TRUE, create three plots (using par(mfrow=c(1,3))): raw phase counts de-trending de-noising loess fits residual phase counts de-noising loess fit detected peaks linear fit peaks NRL estimation","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/footprintR/reference/plotModbaseSpacing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot annotated distances between modified bases. — plotModbaseSpacing","text":"Michael Stadler","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/plotModbaseSpacing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot annotated distances between modified bases. — plotModbaseSpacing","text":"","code":"# see the help for calcModbaseSpacing() for a full example"},{"path":"https://fmicompbio.github.io/footprintR/reference/plotReadStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot distribution of QC statistics — plotReadStats","title":"Plot distribution of QC statistics — plotReadStats","text":"function plots histograms various per-read summary statistics calculated addReadStats.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/plotReadStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot distribution of QC statistics — plotReadStats","text":"","code":"plotReadStats(se)"},{"path":"https://fmicompbio.github.io/footprintR/reference/plotReadStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot distribution of QC statistics — plotReadStats","text":"se RangedSummarizedExperiment, typically generated addReadStats.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/plotReadStats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot distribution of QC statistics — plotReadStats","text":"ggplot object.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/plotReadStats.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot distribution of QC statistics — plotReadStats","text":"Panagiotis Papapasaikas, Charlotte Soneson","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/plotReadStats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot distribution of QC statistics — plotReadStats","text":"","code":"library(SummarizedExperiment) modbamfile <- system.file(\"extdata\", \"6mA_1_10reads.bam\",                           package = \"footprintR\") se <- readModBam(bamfile = modbamfile, regions = \"chr1:6940000-6955000\",            modbase = \"a\", verbose = TRUE) #> extracting base modifications from modBAM files #>     opening input file /Users/runner/work/_temp/Library/footprintR/extdata/6mA_1_10reads.bam #>     reading alignments overlapping any of 1 regions #>     removed 1728 unaligned (e.g. soft-masked) of 20554 called bases #>     read 3 alignments #> finding unique genomic positions... #> collapsed 8350 positions to 6057 unique ones se <- addReadStats(se) plotReadStats(se)"},{"path":"https://fmicompbio.github.io/footprintR/reference/plotRegion.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot single-molecule footprinting data for a single genomic region. — plotRegion","title":"Plot single-molecule footprinting data for a single genomic region. — plotRegion","text":"function visualize read-level collapsed single-molecule footprinting data, data imported using readModkitExtract readBedMethyl.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/plotRegion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot single-molecule footprinting data for a single genomic region. — plotRegion","text":"","code":"plotRegion(   se,   region = NULL,   tracks.reads = NULL,   tracks.summary = list(FracMod = \"Point\"),   modbaseSpace = FALSE,   sequence.context = NULL )"},{"path":"https://fmicompbio.github.io/footprintR/reference/plotRegion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot single-molecule footprinting data for a single genomic region. — plotRegion","text":"se SummarizedExperiment object read-level collapsed single-molecule footprinting data (positions rows reads samples columns). region GRanges object single region. data se overlapping region plotted. Alternatively, region can specified character scalar (e.g. \"chr1:1200-1300\") can coerced GRanges object. NULL (default), data first sequence se visualized. tracks.reads named list names correspond assay names read-level assays se values character vectors plot types make assay. Currently supported plot types : \"Lollipop\" : Lollipop plot (filled circles color representing values assay). \"Heatmap\" : Heatmap plot (tiles color represeting values assay). NULL, plot read-level tracks. tracks.summary named list names correspond assay names summarized data se values character vectors plot types make assay. Currently supported plot types : Point : point plot displaying values assay. Smooth : smoothed line plot displaying values assay. PointSmooth : point smoothed line plot displaying values assay. NULL, plot summary data tracks. special case track name \"FracMod\": se contain assay name, \"Nmod\" \"Nvalid\" assays available, \"FracMod\" calculated assay(se, \"Nmod\") / assay(se, \"Nvalid\"). modbaseSpace logical scalar. TRUE, x-axis shown space modified bases contain positions modified bases data without gaps . FALSE, x-axis show genomic coordinate modified bases typically irregularly spaced. sequence.context character vector sequence context(s) plot. positions match one provided sequence contexts included plot. Sequence contexts can provided using IUPAC redundancy codes. sequence contexts modified bases obtained rowData(se)$sequence.context thus requires se contains appropriate information, example setting sequence.context sequence.reference arguments readBedMethyl generated, adding using addSeqContext.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/plotRegion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot single-molecule footprinting data for a single genomic region. — plotRegion","text":"ggplot object tracks selected tracks.reads tracks.summary.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/footprintR/reference/plotRegion.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot single-molecule footprinting data for a single genomic region. — plotRegion","text":"Charlotte Soneson, Michael Stadler","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/plotRegion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot single-molecule footprinting data for a single genomic region. — plotRegion","text":"","code":"# summarized data (5mC) bmfiles <- system.file(\"extdata\",                        c(\"modkit_pileup_1.bed.gz\", \"modkit_pileup_2.bed.gz\"),                        package = \"footprintR\") reffile <- system.file(\"extdata\", \"reference.fa.gz\", package = \"footprintR\")  seA <- readBedMethyl(bmfiles, sequence.context = 3, sequence.reference = reffile)  plotRegion(seA, region = \"chr1:6940000-6955000\", sequence.context = \"GCH\")  plotRegion(seA, region = \"chr1:6940000-6955000\", sequence.context = \"HCG\")   plotRegion(seA, region = \"chr1:6940000-6955000\",            tracks.summary = list(Nvalid = \"Smooth\"))   # read-level data (6mA) extractfiles <- system.file(\"extdata\",                             c(\"modkit_extract_rc_6mA_1.tsv.gz\",                               \"modkit_extract_rc_6mA_2.tsv.gz\"),                             package = \"footprintR\") seB <- readModkitExtract(extractfiles, modbase = \"a\", filter = \"modkit\")  plotRegion(seB, region = \"chr1:6935800-6935900\",            tracks.summary = NULL,            tracks.reads = list(mod_prob = \"Lollipop\"))  plotRegion(seB, region = \"chr1:6935800-6935900\",            tracks.summary = NULL,            tracks.reads = list(mod_prob = \"Heatmap\"))   plotRegion(seB, region = \"chr1:6935400-6935450\",            tracks.summary = NULL,            tracks.reads = list(mod_prob = c(\"Lollipop\", \"Heatmap\")),            modbaseSpace = TRUE)"},{"path":"https://fmicompbio.github.io/footprintR/reference/readBedMethyl.html","id":null,"dir":"Reference","previous_headings":"","what":"Read collapsed single-molecule footprinting data from a bedMethyl file. — readBedMethyl","title":"Read collapsed single-molecule footprinting data from a bedMethyl file. — readBedMethyl","text":"function read collapsed single-molecule footprinting data (reads combined per genomic position) bedMethyl file.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/readBedMethyl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read collapsed single-molecule footprinting data from a bedMethyl file. — readBedMethyl","text":"","code":"readBedMethyl(   fnames,   modbase = NULL,   nrows = Inf,   seqinfo = NULL,   sequence.context.width = 0,   sequence.reference = NULL,   ncpu = 1L,   verbose = FALSE )"},{"path":"https://fmicompbio.github.io/footprintR/reference/readBedMethyl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read collapsed single-molecule footprinting data from a bedMethyl file. — readBedMethyl","text":"fnames Character vector one several paths bedMethyl files, generated modkit pileup. file read separately become one columns returned SummarizedExperiment object. fnames named vector, names used column names returned object. Otherwise, column names s1, ..., sN, N length fnames. several elements fnames identical names, data corresponding files summed single column returned object. modbase Character vector defining modified base (bases) read. Useful reading subset data bedMethyl files contain multiple types modified bases. NULL (default), rows input file read. nrows read nrows rows input file. seqinfo NULL Seqinfo object containing information set genomic sequences (chromosomes). Alternatively, named numeric vector genomic sequence names lengths. Useful set sorting order sequence names. sequence.context.width, sequence.reference Define sequence context extracted around modified bases. default ( sequence.context.width = 0), sequence context extracted, otherwise returned rowData(x)$sequence.context. See addSeqContext details. ncpu numeric scalar giving number parallel CPU threads use steps readBedMethyl(). verbose TRUE, report progress.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/readBedMethyl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read collapsed single-molecule footprinting data from a bedMethyl file. — readBedMethyl","text":"SummarizedExperiment object genomic positions rows samples (unique names fnames) columns. sequence.context.width != 0, rowData(x)$sequence.context DNAStringSet object extracted sequences.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/footprintR/reference/readBedMethyl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read collapsed single-molecule footprinting data from a bedMethyl file. — readBedMethyl","text":"Michael Stadler","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/readBedMethyl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read collapsed single-molecule footprinting data from a bedMethyl file. — readBedMethyl","text":"","code":"bmfile <- system.file(\"extdata\", \"modkit_pileup_1.bed.gz\", package = \"footprintR\") readBedMethyl(bmfile) #> class: RangedSummarizedExperiment  #> dim: 10000 1  #> metadata(0): #> assays(2): Nmod Nvalid #> rownames: NULL #> rowData names(0): #> colnames(1): s1 #> colData names(0):"},{"path":"https://fmicompbio.github.io/footprintR/reference/readModBam.html","id":null,"dir":"Reference","previous_headings":"","what":"Read base modifications from bam file(s). — readModBam","title":"Read base modifications from bam file(s). — readModBam","text":"Parse ML MM tags (see https://samtools.github.io/hts-specs/SAMtags.pdf, section 1.7) return SummarizedExperiment object information modified bases.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/readModBam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read base modifications from bam file(s). — readModBam","text":"","code":"readModBam(   bamfiles,   regions,   modbase,   seqinfo = NULL,   ncpu = 1L,   verbose = FALSE )"},{"path":"https://fmicompbio.github.io/footprintR/reference/readModBam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read base modifications from bam file(s). — readModBam","text":"bamfiles Character vector one several paths modBAM files, containing information base modifications MM ML tags. bamfiles named vector, names used sample names prefixes read names. Otherwise, prefixes s1, ..., sN, N length bamfiles. bamfiles must index. regions GRanges object specifying genomic regions extract reads . Alternatively, regions can specified character vector (e.g. \"chr1:1200-1300\") can coerced GRanges object. Note reads trimmed boundaries specified ranges. result, returned positions typically extend specified regions. modbase Character vector defining modified base sample. modbase named vector, names correspond names bamfiles. Otherwise, assumed elements order files bamfiles. modbase length 1, modified base used samples. seqinfo NULL Seqinfo object containing information set genomic sequences (chromosomes). Alternatively, named numeric vector genomic sequence names lengths. Useful set sorting order sequence names. ncpu numeric scalar giving number parallel CPU threads use steps readModBam. verbose Logical scalar. TRUE, report progress.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/readModBam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read base modifications from bam file(s). — readModBam","text":"SummarizedExperiment object genomic positions rows samples columns. assay \"mod_prob\" contains per-read modification probabilities, column (sample) corresponding position--read SparseMatrix.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/footprintR/reference/readModBam.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read base modifications from bam file(s). — readModBam","text":"Michael Stadler","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/readModBam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read base modifications from bam file(s). — readModBam","text":"","code":"modbamfile <- system.file(\"extdata\", \"6mA_1_10reads.bam\",                           package = \"footprintR\") readModBam(bamfiles = modbamfile, regions = \"chr1:6940000-6955000\",            modbase = \"a\", verbose = TRUE) #> extracting base modifications from modBAM files #>     opening input file /Users/runner/work/_temp/Library/footprintR/extdata/6mA_1_10reads.bam #>     reading alignments overlapping any of 1 regions #>     removed 1728 unaligned (e.g. soft-masked) of 20554 called bases #>     read 3 alignments #> finding unique genomic positions... #> collapsed 8350 positions to 6057 unique ones #> class: RangedSummarizedExperiment  #> dim: 6057 1  #> metadata(0): #> assays(1): mod_prob #> rownames(6057): chr1:6925830:- chr1:6925834:- ... chr1:6941622:- #>   chr1:6941631:- #> rowData names(0): #> colnames(1): s1 #> colData names(4): sample modbase n_reads qscore"},{"path":"https://fmicompbio.github.io/footprintR/reference/readModkitExtract.html","id":null,"dir":"Reference","previous_headings":"","what":"Read modkit extract file(s) — readModkitExtract","title":"Read modkit extract file(s) — readModkitExtract","text":"function reads one modkit extract files generates single SummarizedExperiment object rows representing positions columns representing samples. SummarizedExperiment object contains one assay (mod_prob) modification probabilities position read. Unobserved read/position combinations represented zero, values 'implicitly' called modkit (modification probability less 5%) represented value 0.02.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/readModkitExtract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read modkit extract file(s) — readModkitExtract","text":"","code":"readModkitExtract(   fnames,   modbase,   filter = NULL,   nrows = Inf,   seqinfo = NULL,   ncpu = 1L,   verbose = FALSE )"},{"path":"https://fmicompbio.github.io/footprintR/reference/readModkitExtract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read modkit extract file(s) — readModkitExtract","text":"fnames Character vector one several paths extract.tsv files, generated modkit. fnames named vector, names used prefixes column (read) names returned SummarizedExperiment object, column names object . Otherwise, prefixes/names s1, ..., sN, N length fnames. modbase Character vector defining modified base sample. modbase named vector, names correspond names fnames. Otherwise, assumed elements order files fnames. modbase length 1, modified base used samples. filter Either NULL (filtering performed), \"modkit\" (records \"fail\" column extract file FALSE retained), named vector, providing filter thresholds (call probability) unmodified modified bases, respectively. names vector \"-\" value(s) modbase. nrows read nrows rows input file. seqinfo NULL Seqinfo object containing information set genomic sequences (chromosomes). Alternatively, named numeric vector genomic sequence names lengths. Useful set sorting order sequence names. ncpu numeric scalar giving number parallel CPU threads use steps readModkitExtract(). verbose TRUE, report progress.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/readModkitExtract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read modkit extract file(s) — readModkitExtract","text":"SummarizedExperiment object genomic positions rows samples columns. assay \"mod_prob\" contains per-read modification probabilities, column (sample) corresponding position--read SparseMatrix.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/footprintR/reference/readModkitExtract.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read modkit extract file(s) — readModkitExtract","text":"Charlotte Soneson","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/readModkitExtract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read modkit extract file(s) — readModkitExtract","text":"","code":"extrfile <- system.file(\"extdata\", \"modkit_extract_rc_5mC_1.tsv.gz\",                         package = \"footprintR\") ## ... no filtering readModkitExtract(extrfile, modbase = \"m\", filter = NULL) #> class: RangedSummarizedExperiment  #> dim: 6432 1  #> metadata(2): modkit_threshold filter_threshold #> assays(1): mod_prob #> rownames(6432): chr1:6932662:+ chr1:6932664:+ ... chr1:6942543:- #>   chr1:6942552:- #> rowData names(0): #> colnames(1): s1 #> colData names(2): sample modbase ## ... modkit filtering readModkitExtract(extrfile, modbase = \"m\", filter = \"modkit\") #> class: RangedSummarizedExperiment  #> dim: 5893 1  #> metadata(2): modkit_threshold filter_threshold #> assays(1): mod_prob #> rownames(5893): chr1:6932662:+ chr1:6932664:+ ... chr1:6942543:- #>   chr1:6942552:- #> rowData names(0): #> colnames(1): s1 #> colData names(2): sample modbase"},{"path":"https://fmicompbio.github.io/footprintR/reference/sumOverRegions.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum number of modified and total reads for each region. — sumOverRegions","title":"Sum number of modified and total reads for each region. — sumOverRegions","text":"function takes RangedSummarizedExperiment modification counts (collapsed reads, created readBedMethyl) sums counts features overlap provided regions.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/sumOverRegions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum number of modified and total reads for each region. — sumOverRegions","text":"","code":"sumOverRegions(se, regions, keepZero = FALSE, verbose = FALSE, ...)"},{"path":"https://fmicompbio.github.io/footprintR/reference/sumOverRegions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum number of modified and total reads for each region. — sumOverRegions","text":"se RangedSummarizedExperiment object assays \"Nmod\" \"Nvalid\", typically returned readBedMethyl. regions GRanges object target regions. keepZero Logical scalar. FALSE (default), elements regions contain least one feature se returned. TRUE, elements regions returned, potentially zero counts. verbose logical scalar. TRUE, report progress. ... Additional parameters aggregateAcrossFeatures, BPPARAM run summing parallel.","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/sumOverRegions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum number of modified and total reads for each region. — sumOverRegions","text":"RangedSummarizedExperiment length(regions) rows (exactly length(regions) rows keepZero = TRUE) ncol(se) columns. colData(se), rowData(se) preserved.","code":""},{"path":[]},{"path":"https://fmicompbio.github.io/footprintR/reference/sumOverRegions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sum number of modified and total reads for each region. — sumOverRegions","text":"Michael Stadler","code":""},{"path":"https://fmicompbio.github.io/footprintR/reference/sumOverRegions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sum number of modified and total reads for each region. — sumOverRegions","text":"","code":"# example bedMethyl file bmfile <- system.file(\"extdata\", \"modkit_pileup_1.bed.gz\", package = \"footprintR\")  # read into a RangedSummarizedExperiment se <- readBedMethyl(bmfile)  # collaps it to a single region of interest regions <- GenomicRanges::GRanges(     \"chr1\", IRanges::IRanges(start = 6940000, end = 7000000, names = \"a\")) sumOverRegions(se, regions) #> Warning: dropping 1257 of 10000 positions (12.57%) that do not overlap any tile #> class: RangedSummarizedExperiment  #> dim: 1 1  #> metadata(0): #> assays(2): Nmod Nvalid #> rownames(1): a #> rowData names(0): #> colnames(1): s1 #> colData names(0):"}]
